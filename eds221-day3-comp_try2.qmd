---
title: "eds221-day3-comp_try2"
---

```{r}
temperature <- 95
if (temperature > 97) { 
  print("temperature warning")
  }else 
    print("No temperature warning")
```

```{r}
whale_length_m<- 15
if ( whale_length_m > 35) 
  print("GIANT")
}else if (whale_length_m >= 20 & whale_length_m<= 35){
    print("MEDIUM")
  }else if (whale_length_m <20) {print("SMALL")}
```

```{r}
housing_type <- "single"

switch (housing_type,
  "single"= print("400"),
  "double"= print("750"),
  "whole"= print("1100")
)
```

```{r}
housing_type <- "single"

if(housing_type== "whole"){
  print("400")
}else if (housing_type == "double"){
  print("750")
} else if (housing_type == "single"){
  print("400")
}
```

```{r}
## For loops

height <- c(58, 61, 65, 72, 89, 94)
# for (i in seq_along(height)) {
#   half_height = height[i] / 2
#   print(half_height)
# }

# For each value in the height vector, return the sum of the value + the one right after it

# hint: height[i+1]

# Write a for loop that calculates the value of height for each element dividied by the mean of the entire heigh vector

for (i in seq_along(height)){
  std_height = height[i]/ mean(height)
  print(std_height)
  
```

```{r}
# Write a for loop with a condition if statement that retunrs the means of all numeric variables in the penguins dataset
```

```{r}
library(palmerpenguins)
```

```{r}

for (i in seq_along(penguins)){
  if (is.numeric(penguins[[i]])){
    penguins_mean <- mean(penguins[[i]], na.rm= TRUE)
    print(penguins_mean)
  }
}
```

## Functional programming for easier iteration

Use apply to iterate over rows or columns, MARGIN = 1 ( rows), Margin = 2( columns), syntax: (x, margin, fun)

```{r}
apply( X = mtcars, MARGIN = 2, FUN = median)


```

## dplyr:: across()

```{r}
library(tidyverse)

```

```{r}
# Find mean flipper length of penguins by species
penguins %>% 
  group_by(species, sex)
  summarize(mean_flip_length = mean(flipper_length_mm, na.rm = TRUE),
            sd_flip_length= sd(flipper_length_mm, na.rm = TRUE),
            max_body_mass = max(body_mass_g, na.rm = TRUE))
```

```{r}
penguins %>% 
  group_by(species,island) %>% 
  summarize(across(where(is.numeric),mean, na.rm = TRUE))
```

## Detecting a string pattern

```{r}
food<- " I love enchiladas"

if (str_detect(food, "burritos")){
  print(" Yay burritos")
}else{
    print("What about burritos?!")
}

```
